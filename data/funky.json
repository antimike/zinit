{"keys": "#!/bin/zsh -f\n\nwhile read map\ndo\n        bindkey -M $map | sed \"s/^/${map}:/\"\ndone < <(bindkey -l) | column -t -s: | fzf", "icons": "# Get overall terminal dimensions\n< <(</dev/tty stty size) \\\n        read TERMINAL_LINES TERMINAL_COLUMNS\n\n# Ensure graphics are cleared on completion, including interrupts\ntrap 'kitty +kitten icat --clear' EXIT SIGINT\n\n# Get cursor position using ANSI witchcraft\necho -ne '\\033[6n' >/dev/tty && IFS='[;' </dev/tty read -t 1 -s -d 'R' _ CURSOR_Y CURSOR_X _\n\nfind /usr/share/icons -type f | fzf --preview=\"\n        BOT=\\$((CURSOR_Y + FZF_PREVIEW_LINES > TERMINAL_LINES ? TERMINAL_LINES : CURSOR_Y + FZF_PREVIEW_LINES))\n        TOP=\\$((BOT - FZF_PREVIEW_LINES + 2))\n        kitty +kitten icat --transfer-mode file --clear &&\n        kitty +kitten icat \\\n                --place=\\${FZF_PREVIEW_COLUMNS}x\\${FZF_PREVIEW_LINES}@\\$((TERMINAL_COLUMNS - FZF_PREVIEW_COLUMNS - 4))x\\${TOP} \\\n                --silent --transfer-mode file {}\n        \"", "fonts": "#!/bin/zsh -f\n# FZF widget to preview and select a font\n# NOTE: Not sure why, but the alignment is slightly off if /bin/zsh is used\n\nlocal -r -x DEFAULT_PREVIEW_POSITION=\"right\"\n\n# Use --transfer-mode file to display icat image in FZF\nlocal -r -x ICAT='kitty +kitten icat --place=${FZF_PREVIEW_COLUMNS}x${FZF_PREVIEW_LINES}@$((TERMINAL_COLUMNS - FZF_PREVIEW_COLUMNS))x${TOP} --silent --transfer-mode file'\nlocal -x TERMINAL_LINES TERMINAL_COLUMNS\nlocal -x CURSOR_X CURSOR_Y\n\n# From font-preview\nlocal -x SEARCH_PROMPT=\"\u276f \"\nlocal -x SIZE=532x365\nlocal -x POSITION=\"+0+0\"\nlocal -x FONT_SIZE=38\nlocal -x BG_COLOR=\"#ffffff\"\nlocal -x FG_COLOR=\"#000000\"\nlocal -x PREVIEW_TEXT=\"ABCDEFGHIJKLM\\nNOPQRSTUVWXYZ\\nabcdefghijklm\\nnopqrstuvwxyz\\n1234567890\\n!@$\\%()\\{\\}[]\"\n\nlocal -r -x IMAGE_CACHE_DIR=~/.cache/fzf-previews/fonts\nmkdir -p \"$IMAGE_CACHE_DIR\"\n\n# Get overall terminal dimensions\n< <(</dev/tty stty size) \\\n        read TERMINAL_LINES TERMINAL_COLUMNS\n\n# TODO: Add support for Guake-friendly preview method\ntrap \"kitty +kitten icat --clear\" EXIT SIGINT\n\n# Get cursor position using ANSI witchcraft\necho -ne '\\033[6n' >/dev/tty && IFS='[;' </dev/tty read -t 1 -s -d 'R' _ CURSOR_Y CURSOR_X _\n\n# List fonts with imagemagick and feed the list to FZF\nconvert -list font | awk -F: '/^[ ]*Font: /{print substr($NF,2)}' |\n        fzf --prompt=\"$SEARCH_PROMPT\" --preview=\"\n                BOT=\\$((CURSOR_Y + FZF_PREVIEW_LINES > TERMINAL_LINES ? TERMINAL_LINES : CURSOR_Y + FZF_PREVIEW_LINES))\n                TOP=\\$((BOT - FZF_PREVIEW_LINES + 2))\n                kitty +kitten icat --transfer-mode file --clear\n                PREVIEW=${IMAGE_CACHE_DIR}/{}.png\n                if [[ ! -e \\\"\\$PREVIEW\\\" ]]; then\n                        convert -size \\\"$SIZE\\\" \\\n                                xc:none \\\n                                -background transparent \\\n                                -gravity center \\\n                                -pointsize \\\"$FONT_SIZE\\\" \\\n                                -font {} \\\n                                -fill \\\"$BG_COLOR\\\" \\\n                                -annotate +0+0 \\\"$PREVIEW_TEXT\\\" \\\n                                -flatten \\\"\\$PREVIEW\\\" & \\\n                        wait\n                fi\n                ${ICAT} \\\"\\$PREVIEW\\\"\"", "themes": "#!/bin/zsh -f\n# Explore themes with FZF\n\ntypeset -a types=(\n        kitty\n        i3\n        nvim\n        icons\n        rofi\n)\ntypeset -A cmds=(\n        [kitty]=\"kitty +kitten themes\"\n        [rofi]=\"rofi-theme-selector\"\n)\npick_i3_theme() {\n        i3-style $(i3-style -l | fzf | awk '{print $1;}') -o ~/.config/i3/config --reload\n}\nprint \"Not implemented!\" >&2", "underline": "zmodload zsh/zutil\nlocal -A opts=(\n        [-u]='-'\n        [-s]=\n)\n\nzparseopts -D -E -K -A opts -- u: s:\n\nlocal uchar=${${opts[-u]}[1]:--}        # Underline char\nlocal schar=${${opts[-s]}[1]}           # Char printed under whitespace\nprint -l -- \"$*\" \"$(tr '[:graph:]' \"[${uchar}*]\" <<<\"$*\" \\\n        | () { [[ -n $schar ]] && tr '[:blank:]' \"[${schar}*]\" || cat; })\"", "find_git_repos": "#!/bin/zsh -f\n# Find all git repos under a given parent directory\n# Taken from `man find(1)`\n\nfind $1 \\\n        \\( -exec test -d '{}.git' \\; \\) \\\n        -print -prune", "zhooks": "#!/bin/zsh\n# Display and fuzzy-search all active zsh hooks\n\nlocal -a hook_arrs=(\n        chpwd_functions\n        periodic_functions\n        precmd_functions\n        preexec_functions\n        zshaddhistory_functions\n        zsh_directory_name_functions\n        zshexit_functions\n)\n\nfor arr in $hook_arrs; do\n        for fn in ${(P)arr}; do\n                print \"${arr}:${fn}:$(whence -v ${fn} | awk '{print $NF}')\"\n        done\ndone | column -t -s: | fzf --preview=\"\n        [[ -e {3} ]] && bat --force-colorization -l zsh {3} || print {}\n        \" --bind 'enter:execute(pistol {3})'", "bg-fav": "#!/bin/zsh -f\n# Add current backgrounds (from ~/.fehbg) to favorites file\n\n# Keep options local and allow multiple redirects (for logging + IO)\nemulate -L zsh\nsetopt MULTIOS\nexec 1>&1 &>>~/.cache/logs/${0}.log            # Logging\n\ndeclare -r -x DEFAULT_PREVIEW_POSITION=\"right\"\ndeclare -r -x ICAT='kitty +kitten icat --place=${FZF_PREVIEW_COLUMNS}x${FZF_PREVIEW_LINES}@$((TERMINAL_COLUMNS - FZF_PREVIEW_COLUMNS))x${TOP} --silent --transfer-mode file'\ndeclare -x TERMINAL_LINES TERMINAL_COLUMNS\ndeclare -x CURSOR_X CURSOR_Y\ndeclare -x SEARCH_PROMPT=\"\u276f \"\n\nlocal FAV_FILE=~/.config/i3/data/favorites/wallpapers.txt\nmkdir -p $(dirname $FAV_FILE) || return 1\n\n_get_current_wallpapers() {\n        tail -1 ~/.fehbg | cut -d' ' -f4-\n}\n\n${(A)walls:=${=$(_get_current_wallpapers)}}\nlocal -i screen\n\nfzf \\\n        --preview=", "glist": "#!/bin/zsh -f\n# List shell functions defined by gfunky\n\ngfunky | grep -o '^[a-zA-Z_-]\\+'", "zpack": "#!/bin/zsh -f\n# Function to quickly switch zsh package managers\n\nlocal dotdir=${ZDOTDIR:-~/.config/zsh}\nlocal target=${dotdir}/.zshrc.${1}\n\nif [[ ! -e $target ]]; then\n        print -u2 \"zshrc for package manager '${1}' not found\"\n        return 1\nelif [[ ! -h ~/.zshrc ]]; then\n        print -u2 \"~/.zshrc is not a symlink!  Cancelling\"\n        return 2\nelse\n        print -u2 \"Relinking ~/.zshrc...\"\n        print -u2 \"Old: ~/.zshrc -> ${:-~/.zshrc(:P)}\"\n        rm ~/.zshrc && ln -s ${target:P} ~/.zshrc &&\n                print -u2 \"New: ~/.zshrc -> ${target:P}\" ||\n                print -u2 \"Failed to relink ~/.zshrc\"\nfi", "d": "#!/bin/zsh -f\n# Improved version of Oh-My-ZSH's d(), with FZF integration\n\nlocal choice=\"$(dirs -v \\\n        | fzf +m --with-nth=2 --preview='lsd -AX --ignore-config -F -1 --blocks user,size,date,name --date relative  --icon always --color always --icon-theme fancy --size short -- ${~:-{2}}' \\\n        | cut -f1)\"\n[[ -n $choice ]] && cd ${~:-~-${choice}}", "xfind": "#!/bin/zsh -f\n# Find files based on file attributes (including xattrs) and mimetypes\n\nlocal -a processed subcmd\nlocal state\n\n# Parser: simple state-machine\nwhile [[ $# -gt 0 ]]; do\n        case $state in\n                -attr)\n                        case $1 in\n                                \\;)\n                                        processed+=(\"${subcmd}\" bash {} \\;)\n                                        state=\n                                        ;;\n                                *)\n                                        subcmd+=(\"$1\")\n                                        ;;\n                        esac\n                        ;;\n                *)\n                        case $1 in\n                                -attr)\n                                        processed+=(-exec bash -c)\n                                        subcmd=(getfattr -d -m - '\"$1\"' '|')\n                                        state=-attr\n                                        ;;\n                                -mime)\n                                        processed+=(-exec bash -c 'f=\"$1\"; shift; [[ $(file -bi \"$f\") == $* ]]' bash {} \"$2\" \\;)\n                                        shift\n                                        ;;\n                                *)\n                                        processed+=(\"$1\")\n                                        ;;\n                        esac\n                        ;;\n        esac\n        shift\ndone\n\n# print -l -- $processed\nfind ${processed}", "gi": "#!/bin/zsh -f\n# Append lines to repository .gitignore\n\nlocal gitignore\nif gitignore=\"$(git rev-parse --show-toplevel)/.gitignore\"; then\n        print -l -- \"\" $@ >>$gitignore\nelse\n        print -u2 \"Git repository not found\"\n        return 1\nfi", "pygments_themes": "#!/bin/zsh -f\n# Select a Pygments theme with previews\n\nlocal pygments_dir=/usr/lib/python3.10/site-packages/pygments/styles\npygmentize -L styles \\\n        | awk -vRS='*' -vOFS=':' 'BEGIN {FS=\":[[:space:]]+\";} {$1=$1; print;}' \\\n        | sed '/^$/d' | sed 's/^\\s*//' | sed '1,2d' \\\n        | column -s: -t -W1,2 -o'\t' \\\n        | fzf \\\n                --preview=\"pygmentize -f 16m -O style={1} ${pygments_dir}/{1}.py\" \\\n                --bind \"ctrl-space:execute(pygmentize -f 16m -O style={1} ${pygments_dir}/{1}.py | bat --color=always)\" \\\n                --bind \"ctrl-d:preview-half-page-down,ctrl-u:preview-half-page-up\" \\\n                --bind \"ctrl-f:preview-down,ctrl-b:preview-up\"", "bat_themes": "#!/bin/zsh -f\n# Preview and select themes for the `bat` pager\n\nlocal f=${1:-${HOME}/.config/i3/bin/weather.py}\n\nbat --list-themes | fzf \\\n        --preview=\"bat --theme {} --color=always ${f}\" \\\n        --bind \"ctrl-space:execute(bat --theme {} --color=always ${f})\" \\\n        --bind \"ctrl-d:preview-half-page-down,ctrl-u:preview-half-page-up\" \\\n        --bind \"ctrl-f:preview-down,ctrl-b:preview-up\"", "highlight_themes": "#!/bin/zsh -f\n# Preview and choose `highlight` themes (source highlighting)\n\nlocal f=${1:-${HOME}/.config/i3/bin/weather.py}\nhighlight --list-scripts=themes \\\n        | awk -vRS='\\n\\n' 'NR==2 {print;}' \\\n        | column -s: -t -W1,2 \\\n        | fzf \\\n                --preview=\"highlight -O truecolor --style {1} ${f}\" \\\n                --bind \"ctrl-d:preview-half-page-down,ctrl-u:preview-half-page-up\" \\\n                --bind \"ctrl-f:preview-down,ctrl-b:preview-up\" \\\n                --bind \"ctrl-space:execute(highlight -O truecolor --style {1} -l ${f} | bat --color=always)\" \\\n        | awk '{print $1;}'", "i3_keys": "#!/bin/zsh -f\n# Display and search i3 keybindings\n\nsed 's/^\\s*//' $c | grep -v '^#' | grep '^bindsym' | cut -d' ' -f2- | column -t -l2 -o'\t' | fzf", "i3_keypresses": "#!/bin/zsh -f\n# Monitor i3 keybindings in realtime\n\ni3-msg -t subscribe -m '[\"binding\"]'", "dnf_browse": "#!/bin/zsh -f\n# Search RPM packages with DNF and browse using FZF\n# The DNF cache is **not** updated unless --update-cache is passed\n\nlocal -a flags=()\nif [[ \"$1\" == \"--update-cache\" ]]; then\n        shift 1\nelse\n        flags+=(-C)\nfi\n\nlocal packages=( $(dnf search $* | fzf -m | awk '{print $1;}') )\nfor p in $packages; do\n        dnf info $flags $p\ndone", "aliases": "#!/bin/zsh -f\n# Browse / select zsh aliases with FZF\n\nalias -L | cut -d' ' -f2- | column -t --separator='=' -o'\t' -l2 | fzf | cut -d'\t' -f1", "find_subrepos": "#!/bin/zsh -f\n# Find git repositories under a git worktree\n# e.g., can be used to find candidates for \"submodule-ification\"\n# Params:\n#       $1      git toplevel worktree (optional)\n#       $2      gitdir (optional; use for bare repos, e.g.)\n\nlocal toplevel=$1 gitdir\nif [[ -z $toplevel ]]; then\n        toplevel=\"$(git rev-parse --show-toplevel)\" || return 1\nfi\nif [[ -d $2 ]]; then\n        gitdir=$2\nelse\n        gitdir=$toplevel\nfi\n\nfind $toplevel -mindepth 1 \\\n        \\! \\( -exec bash -c 'git --git-dir=\"$2\" --work-tree=\"$3\" ls-files --error-unmatch \"$1\" >/dev/null 2>&1' bash '{}' $gitdir $toplevel \\; \\) -prune \\\n        -o -type d -exec test -d '{}/.git' \\; -prune -print", "findprog": "#!/bin/zsh -f\n# Find file in $PATH with name $1\n# Useful if syntax highlighting, etc. indicates an executable exists but `which` can't find it\n\nfor p in $path; do find \"$p\" -maxdepth 1 -name \"$1\"; done", "godocs": "#!/bin/zsh -f\n# Search and display READMEs for golang projects using FZF\n# TODO: Finish implementing keybind state machine (currently working on using Dhall to generate FZF keybind config)\n\n# From pyenv\n_godocs_abort() {\n  { if [ \"$#\" -eq 0 ]; then cat -\n    else echo \"godocs: $*\"\n    fi\n  } >&2\n  exit 1\n}\n\n(( GODOCS_DEBUG )) || _godocs_abort \"Error: godocs: not implemented\"\nlocal goprojects=${gopath}/src/github.com\nlocal state=select_project\n\nlocal -a FZF_IO=(\n        --delimiter='\\0'\n        --ansi\n        --with-nth='1..-2'      # Last field is the full path to the chosen file / directory\n)\nlocal -a FZF_PREVIEW=(\n        --preview=\"$(_fzf_preview_cmd )\"\n        --bind=\"ctrl-space:execute(bat --color=always -- {-1})\"\n        --bind=\"ctrl-d:preview-half-page-down,ctrl-u:preview-half-page-up\"\n        --bind=\"ctrl-f:preview-down,ctrl-b:preview-up\"\n)\n\n_fzf_keybind_cmd() {\n        local -a cmds=()\n        for key action in $@; do\n                cmds+=(\"${(q-):-${key}:${action}}\")\n        done\n        print -- ${(j_,_)cmds}\n}\n\n_fzf_preview_cmd() {\n        printf 'bat --color=always -- \"%s\"' $*\n}\n\n_fzf_handle_accept() {\n        case $state in\n                (select_project) ;;\n                (select_file) ;;\n        esac\n}\n\n# Go directory structure: go/src/<site>/<username>/<project>/...\nfind $goprojects -maxdepth 2 -mindepth 2 -type d -printf '%P\\t%p\\n' \\\n        | fzf $FZF_IO \\\n        | awk -F'\\t' '{print $NF;}' \\\n        | xargs -i find '{}' -name \"*.md\" -type f -printf '%p\\t%P\\t%p\\n' \\\n        | sed -r 's/^([^\\t]+)/echo $(basename `dirname \\1`)/e' \\\n        | fzf $FZF_IO $FZF_PREVIEW \\\n        | awk -F'\\t' '{print $NF;}' \\\n        | xargs glow -p"}