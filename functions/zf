#!/bin/zsh -f
# zf: Convenience function to manage personal collection of zsh autoload functions
# GOALS:
#   - Generate the following from simple, intuitive markup:
#       * arg parsing
#       * completion
#       * helptext
#   - Possibly use declarative config file (YAML?) to generate "wrapper function" which handles the above and passes parsed args to inner function
#   - e.g.:
#   ```yaml
#   params:
#     - name: first
#       values: <zsh_code>
#       summary: ...
#   flags:
#     - name: verbose
#       summary: increase output verbosity
#       repeat: true
#   options:
#     - forms: [-f, --file]
#       repeat: true
#       name: files
#       args:
#         - values: <zsh_code>
#   ```

export FUNCDIR=${${(%):-%x}:h}

_zf_functions() {
    # local -a funks=( ${(f)"$(gfunky --color n \
    #   | grep -v '^\s\+#!' \
    #   | sed -n '/^[a-zA-Z_-}]/,/^\s\+[^#]/p' \
    #   | grep -v '^\s\+[^#]' \
    #   | grep -v '^\s*$' \
    #   | sed 's/^\s*//' \
    #   | awk -vRS='}\n' -vFS=' {\n# ' -vOFS=':' '{$1=$1; print;}' \
    #   | grep -v '^$' \
    #   | sed 's/^\([a-zA-Z_-]\+\)()\( {\)\?/\1/' \
    #   | grep -v '^#')"}
    # )
    if ! [[ -d $FUNCDIR ]]; then
        print -u2 "ERROR: zf needs \$FUNCDIR to be defined"
    fi
    find $FUNCDIR -maxdepth 1 -type f
}

_zf_usage() {
    cat <<-USAGE
zf
	USAGE
}

_zf_get_usage {
    # Get helptext for an autoload function
    # @PARAMS
    # a     |       Description     |   _values
}

zf() {

}
